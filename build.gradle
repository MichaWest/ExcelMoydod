/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.openjfx.javafxplugin' version '0.0.11'//'0.0.8'

}
ext {
    junitVersion = '5.7.1'
}

java {
    /*toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }*/
    targetCompatibility = 17
}
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

javafx {
    version = '19'//"14.0.2"
    modules = ['javafx.controls', 'javafx.fxml',"javafx.base",  "javafx.graphics", "javafx.web"]
    //mainClass 'main.App'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.

    //implementation "com.gluonhq:charm-glisten:6.0.5"

    //implementation 'com.jfoenix:jfoenix:9.0.10'
    //implementation group: 'com.jfoenix', name: 'jfoenix', version: '9.0.9'
    //implementation 'io.github.palexdev:materialfx:11.13.5'
    implementation 'io.github.mkpaz:atlantafx-base:1.1.0'
    implementation 'org.jfxtras:jmetro:11.6.14'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    //implementation group: 'com.panemu', name: 'tiwulfx', version: '2.0'
    implementation 'org.apache.poi:poi:5.2.2'
    implementation 'org.apache.poi:poi-ooxml:5.2.2'

}

application {
    // Define the main class for the application.
    mainClass = 'Main'
    mainClassName = 'Main'

}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

jar {
    manifest {
        attributes "Main-Class": "Main"
    }
    /*from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }*/
}
test {
    useJUnitPlatform()
}
shadowJar {
    archiveBaseName.set('app-all')
    archiveClassifier.set('')
    archiveVersion.set('')
}